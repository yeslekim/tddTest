package com.example.tddTest.app.membership.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.example.tddTest.app.enums.MembershipType;
import com.example.tddTest.app.membership.service.MembershipRequest;
import com.google.gson.Gson;

@ExtendWith(MockitoExtension.class)
public class MembershipControllerTest {

	@InjectMocks
	private MembershipController target;
	
	private MockMvc mockMvc;
	private Gson gson;
	
	@BeforeEach
	public void init() {
		gson = new Gson();
		mockMvc = MockMvcBuilders.standaloneSetup(target)
				.build();
	}
	
//	@Test
//	public void mockMvc가Null이아님() throws Exception {
//		assertThat(target).isNotNull();
//		assertThat(mockMvc).isNotNull();
//	}
	
	@Test
	public void 멤버십등록실패_사용자식별값이헤더에없음() throws Exception {
		
		// given
		final String url = "/api/v1/memberships";
		
		// when
		final ResultActions resultActions = mockMvc.perform(
				MockMvcRequestBuilders.post(url)
				.content(gson.toJson(membershipRequest(10000, MembershipType.NAVER)))
				.contentType(MediaType.APPLICATION_JSON)
				);
		
		// then
		resultActions.andExpect(status().isBadRequest());
	}
	
    private MembershipRequest membershipRequest(final Integer point, final MembershipType membershipType) {
        return MembershipRequest.builder()
                .point(point)
                .membershipType(membershipType)
                .build();
    }
}
